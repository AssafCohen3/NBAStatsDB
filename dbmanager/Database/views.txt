CREATE VIEW IF NOT EXISTS Shots as
select *, iif(Description like '%MISS%', 0, 1) as MadeShot from Event
where EventType in (1, 2, 3);
CREATE VIEW IF NOT EXISTS AndOnes as
select distinct E1.*, iif(E1.Description like '%MISS%', 0, 1) as MadeShot
from Event E1
    inner join Event E2 on E1.GameId = E2.GameId and E1.Period = E2.Period and E1.RemainingSeconds = E2.RemainingSeconds and E2.EventType = 1 and E2.PlayerAId = E1.PlayerAId and E1.EventOrder > E2.EventOrder
where E1.EventType=3 and E1.EventActionType=10;
CREATE VIEW IF NOT EXISTS Starters as
select GameId, TeamAId as TeamId, Starter.value as StarterId
from Event, json_each(TeamALineupIds) Starter
where EventOrder=0
union all
select GameId, TeamBId, Starter.value as StarterId
from Event, json_each(TeamBLineupIds) Starter
where EventOrder=0;
CREATE VIEW IF NOT EXISTS GameLineupsWithNames as
select GameLineups.*, group_concat(FullName) as Players
from GameLineups, json_each(Lineup) ActivePlayerId
    inner join Player on Player.PlayerId = ActivePlayerId.value
group by GameId, TeamId, StartEventOrder, EndEventOrder;
CREATE VIEW IF NOT EXISTS PlayerGameClutchSeconds as
select GameId,
       ActivePlayer.value as PlayerId,
       sum(min(300, RemainingSeconds + SecondsSincePreviousEvent) - RemainingSeconds) as ClutchTime
from Event,
     json_each(rtrim(TeamALineupIds, ']') || ', ' || ltrim(TeamBLineupIds, '[')) ActivePlayer
where RemainingSeconds <= 300 and abs(ScoreMargin) <= 5 and Period >= 4
group by GameId, ActivePlayer.value;
CREATE VIEW IF NOT EXISTS PlayersTransactionsWithRankAndDate as
with
    WithDate as (
        select *,
               date(Year || '-01-01', '+' || (Month-1) || ' months', '+' || (Day-1) || ' days') as TDate,
               date(Year || '-01-01', '+' || (Month-1) || ' months') as TDateAtStart
        from Transactions
        where PlayerBREFId != '' and TradeeType != 'draft pick'
    ),
    ClosestTransaction as (
        select T1.*,
               iif(T2.TransactionNumber is null, T1.TDateAtStart, iif(T1.TeamANBAId != T2.TeamANBAId, iif(T1.OnTeamAAfter=1, date(coalesce(T2.TDate, T2.TDateAtStart), '+1 days'), coalesce(T1.TDate, T1.TDateAtStart)),
                   iif(T1.OnTeamAAfter=1, coalesce(T1.TDate, T1.TDateAtStart), date(coalesce(T2.TDate, T2.TDateAtStart), '+1 days')))) as CorrectDate,
               min(T2.Day) as Closest
        from WithDate T1
            left join WithDate T2 on T1.PlayerBREFId=T2.PlayerBREFId and T1.Year=T2.Year and T1.Month=T2.Month and
                                          (T1.Day, T1.TransactionNumber) != (T2.Day, T2.TransactionNumber)
        where T1.Day=-1 and T1.PlayerBREFId != '' and T1.TradeeType != 'draft pick'
        group by T1.Year, T1.Month, T1.Day, T1.TransactionNumber, T1.PlayerNBAId
        ),
    Final as (
        select T.Season, T.Year, T.Month, T.Day, T.TransactionNumber, T.TeamANBAId, T.TeamANBAName, T.TeamABREFAbbr, T.TeamABREFName, T.TeamBNBAId,
               T.TeamBNBAName, T.TeamBBREFAbbr, T.TeamBBREFName, T.PlayerNBAId, T.PlayerNBAName, T.PlayerBREFId, T.PlayerBREFName, T.PersonBREFId,
               T.PersonBREFName, T.PersonRole, T.TransactionType, T.ActionType, T.SubTypeA, T.SubTypeB, T.SubTypeC, T.OnTeamAAfter, T.OnTeamBAfter,
               T.PickYear, T.PickRound, T.PicksNumber, T.TradeeType, T.Additional,
               iif(T.Day=-1, CorrectDate, T.TDate) as FixedDate
        from WithDate T
            left join ClosestTransaction CT on T.Year=CT.Year and T.Month=CT.Month and T.Day=CT.Day and T.TransactionNumber=CT.TransactionNumber and
                                            T.PlayerBREFId = CT.PlayerBREFId
    ),
    NewRanks as (
        select *,
               rank() over (partition by PlayerBREFId order by FixedDate, TransactionNumber) as FixedRank
        from Final
    )
select *
from NewRanks;
CREATE VIEW IF NOT EXISTS GameClutchSeconds as
select GameId,
       sum(min(300, RemainingSeconds + SecondsSincePreviousEvent) - RemainingSeconds) filter ( where RemainingSeconds <= 300 and Period >= 4 ) as PotentialClutch,
       coalesce(sum(min(300, RemainingSeconds + SecondsSincePreviousEvent) - RemainingSeconds) filter ( where RemainingSeconds <= 300 and abs(ScoreMargin) <= 5 and Period >= 4 ), 0) as ClutchTime
from Event
group by GameId;
CREATE VIEW IF NOT EXISTS AllPlayersFullStats as
select count(*) as GamesPlayed,
        sum(MIN) as TotalMIN, round(avg(MIN), 2) as AverageMIN,
        sum(FGM) as TotalFGM, round(avg(FGM), 2) as AverageFGM,
        sum(FGA) as TotalFGA, round(avg(FGA), 2) as AverageFGA,
        sum(FG3M) as TotalFG3M, round(avg(FG3M), 2) as AverageFG3M,
        sum(FG3A) as TotalFG3A, round(avg(FG3A), 2) as AverageFG3A,
        sum(FTM) as TotalFTM, round(avg(FTM), 2) as AverageFTM,
        sum(FTA) as TotalFTA, round(avg(FTA), 2) as AverageFTA,
        sum(OREB) as TotalOREB, round(avg(OREB), 2) as AverageOREB,
        sum(DREB) as TotalDREB, round(avg(DREB), 2) as AverageDREB,
        sum(REB) as TotalREB, round(avg(REB), 2) as AverageREB,
        sum(AST) as TotalAST, round(avg(AST), 2) as AverageAST,
        sum(STL) as TotalSTL, round(avg(STL), 2) as AverageSTL,
        sum(BLK) as TotalBLK, round(avg(BLK), 2) as AverageBLK,
        sum(TOV) as TotalTOV, round(avg(TOV), 2) as AverageTOV,
        sum(PF) as TotalPF, round(avg(PF), 2) as AveragePF,
        sum(PTS) as TotalPTS, round(avg(PTS), 2) as AveragePTS,
        sum(PlusMinus) as TotalPlusMinus, round(avg(PlusMinus), 2) as AveragePlusMinus,
        round(avg(FGM)/avg(FGA), 2) as FGPercent,
        round(avg(FG3M)/avg(FG3A), 2) as FG3Percent,
        round(avg(FTM)/avg(FTA), 2) as FTPercent
    from BoxScoreP BSP
    where SeasonType in (2, 4);
CREATE VIEW IF NOT EXISTS AllstarCareer as
select PlayerId, PlayerName, 
       count(distinct GameDate) as Appeareances, min(Season) as FirstAllstar, max(Season) as LastAllstar,
       round(avg(MIN), 2) as AverageMIN, sum(MIN) as TotalMIN, round(avg(PTS), 2) as AveragePTS, sum(PTS) as TotalPTS from BoxScoreP
where BoxScoreP.SeasonType=3 group by PlayerId
order by AveragePTS desc;
CREATE VIEW IF NOT EXISTS BoxScoreORTG as
with
    WithTeamStats as (
        select PlayerId, BSP.GameId,
               BSP.PTS, BSP.AST, BSP.FGA, BSP.FGM, BSP.FG3M, BSP.FTM, BSP.FTA, BSP.OREB, BSP.TOV,
               BST.PTS as TeamPTS, BST.AST as TeamAST, BST.FGA as TeamFGA,
               BST.FGM as TeamFGM, BST.FG3M as TeamFG3M, BST.FTM as TeamFTM, BST.FTA as TeamFTA,
               BST.TOV as TeamTOV, BST.OREB as TeamOREB,
               BST.OREB * 1.0 / (BST.OREB + BSOP.DREB) as TeamORPercent,
               5.0*BSP.MIN/BST.MIN as MPRatio
        from BoxScoreP BSP
            inner join BoxScoreT BST on BSP.GameId=BST.GameId and BSP.TeamId=BST.TeamId
            inner join BoxScoreT BSOP on BSP.GameId = BSOP.GameId and BSOP.TeamId != BSP.TeamId
        where BSP.MIN > 0
    ),
    SecondPhase as (
        select PlayerId, GameId,
               FTM, TOV, TeamOREB, OREB, TeamPTS, FGM, FG3M, PTS, FGA, TeamFGA, TeamTOV,
               TeamFGM, TeamFTM, TeamFTA, TeamORPercent,
               MPRatio * 1.14 * ((TeamAST - AST)*1.0/TeamFGM) + (1 - MPRatio) * ((TeamAST * MPRatio - AST)*1.0/(TeamFGM * MPRatio - FGM)) as QAst,
               AST * (((TeamFGM - FGM) + 0.5*(TeamFG3M - FG3M))/(TeamFGM - FGM)) * (((TeamPTS - TeamFTM) - (PTS - FTM))*1.0/(2.0*(TeamFGA - FGA))) as PtsGenAST,
               TeamFGM + (1 - power(1 - (TeamFTM*1.0/TeamFTA), 2)) * TeamFTA * 0.4 as TeamScPoss,
               AST * (((TeamPTS - TeamFTM) - (PTS - FTM))*1.0 / (4.0*(TeamFGA - FGA))) as ScPossAST,
               coalesce((1 - power(1 - (FTM * 1.0/FTA), 2)) * 0.4 * FTA, 0.0) as ScPossFT,
               coalesce(power(1 - (FTM*1.0/FTA), 2) * 0.4 * FTA, 0.0) as FTXPoss,
               (FGA - FGM) * (1 - 1.07*TeamORPercent) as FGXPoss
        from WithTeamStats WTS
    ),
    ThirdPhase as (
        select PlayerId, GameId,
               PtsGenAST, FTM, ScPossAST, ScPossFT, FGXPoss, FTXPoss, TOV, TeamOREB, TeamScPoss, OREB, TeamPTS,
               TeamFGM, TeamFTM, TeamFTA, TeamORPercent,
               coalesce(2*(FGM + 0.5*FG3M) * (1 - 0.5*((PTS - FTM)*1.0/(2.0 * FGA)) * QAst), 0.0) as PtsGenFG,
               TeamScPoss*1.0 / (TeamFGA + 0.44*TeamFTA + TeamTOV) as TeamPLPercent,
               coalesce(FGM * (1 - 0.5 * ((PTS - FTM)*1.0 / (2.0 * FGA)) * QAst), 0.0) as ScPossFG
        from SecondPhase
    ),
    ForthPhase as (
        select PlayerId, GameId,
               PtsGenFG, PtsGenAST, FTM, ScPossFG, ScPossAST, ScPossFT, FGXPoss, FTXPoss, TOV, TeamOREB, TeamPLPercent, TeamScPoss, OREB, TeamPTS,
               TeamFGM, TeamFTM, TeamFTA,
               ((1 - TeamORPercent) * TeamPLPercent)*1.0 / ((1 - TeamORPercent) * TeamPLPercent + (1 - TeamPLPercent) * TeamORPercent) as TeamORW
        from ThirdPhase
    ),
    FifthPhase as (
        select PlayerId, GameId,
               PtsGenFG, PtsGenAST, FTM, ScPossFG, ScPossAST, ScPossFT, FGXPoss, FTXPoss, TOV,
               1 - (TeamOREB * TeamORW * TeamPLPercent) * 1.0 / TeamScPoss as aCoeff,
               OREB * TeamORW * TeamPLPercent * (TeamPTS * 1.0 / (TeamFGM + (1 - power(1 - (TeamFTM*1.0/TeamFTA), 2)) * 0.4 * TeamFTA)) as PtsGenOR,
               OREB * TeamORW * TeamPLPercent as ScPossOR
        from ForthPhase
    ),
    SixthPhase as (
        select PlayerId, GameId,
               (PtsGenFG + PtsGenAST + FTM) * aCoeff + PtsGenOR as PtsGen,
               (ScPossFG + ScPossAST + ScPossFT)*aCoeff + ScPossOR + FGXPoss + FTXPoss + TOV as PossTot
        from FifthPhase
    ),
    SeventhPhase as (
        select PlayerId, GameId,
               PtsGen,
               PossTot,
               coalesce(PtsGen*100.0/PossTot, 0.0) as OffRtg
        from SixthPhase
    )
select BSP.*,
       SeventhPhase.PossTot, SeventhPhase.PtsGen, SeventhPhase.OffRtg
from SeventhPhase
    inner join BoxScoreP BSP on BSP.PlayerId=SeventhPhase.PlayerId and BSP.GameId=SeventhPhase.GameId;
CREATE VIEW IF NOT EXISTS PlayoffBoxScoreT as
select T.*,
       PSS.SerieOrder, PSS.LevelTitle,
       rank() over (partition by T.Season, T.TeamAId, T.TeamBId, T.TeamId order by GameDate) as GameNumber,
       count(*) filter ( where WL='L' ) over (partition by SeasonType, T.Season, T.TeamAId, T.TeamBId, TeamId order by GameDate rows between unbounded preceding and 1 preceding) as LostGames,
       count(*) filter ( where WL='W' ) over (partition by SeasonType, T.Season, T.TeamAId, T.TeamBId, TeamId order by GameDate rows between unbounded preceding and 1 preceding) as WonGames,
       count(*) filter ( where WL='W' ) over (partition by SeasonType, T.Season, T.TeamAId, T.TeamBId, TeamId) as SeriesWins,
       count(*) filter ( where WL='L' ) over (partition by SeasonType, T.Season, T.TeamAId, T.TeamBId, TeamId) as SeriesLoses
from BoxScoreT T
    inner join PlayoffSerieSummary PSS on T.Season = PSS.Season and T.TeamAId = PSS.TeamAId and T.TeamBId = PSS.TeamBId
where T.SeasonType = 4;
CREATE VIEW IF NOT EXISTS EliminationGames as
select *
from PlayoffBoxScoreT
where LostGames = max(SeriesWins, SeriesLoses) - 1
order by GameDate desc;
CREATE VIEW IF NOT EXISTS TeamSeason as
with
    TeamSeasons as (
        select TeamId, Season, group_concat(distinct TeamName) as TeamNames,
               count(*) as GamesPlayed,
               sum(iif(WL = 'W', 1, 0)) as Wins,
               sum(iif(WL = 'L', 1, 0)) as Loses,
               sum(iif(WL = 'W', 1, 0)) * 1.0 / count(*) as WinPercent
        from BoxScoreT
        where SeasonType = 2
        group by TeamId, Season
    )
select *,
       rank() over (partition by Season order by WinPercent desc) as Standing
from TeamSeasons;
CREATE VIEW IF NOT EXISTS PlayoffSerieSummaryWithSeasonData as
select
       PSS.Season, SerieOrder, LevelTitle,
       TeamAId, TeamAName, T1.Wins as TeamASeasonWins, T1.Loses as TeamASeasonLoses, T1.WinPercent as TeamASeasonWinPercent,
       TeamBId, TeamBName, T2.Wins as TeamBSeasonWins, T2.Loses as TeamBSeasonLoses, T2.WinPercent as TeamBSeasonWinPercent,
       T1.Standing as TeamAStanding,
       T2.Standing as TeamBStanding,
       TeamAWins, TeamBWins,
       WinnerId, WinnerName,
       LoserId, LoserName
from PlayoffSerieSummary PSS
    inner join TeamSeason T1
        on T1.Season = PSS.Season and T1.TeamId = PSS.TeamAId
    inner join TeamSeason T2
        on T2.Season = PSS.Season and T2.TeamId = PSS.TeamBId;
CREATE VIEW IF NOT EXISTS FullTeamPlayoffs as
with
    PlayoffTeams as (
        select distinct Season, TeamId, TeamName
        from BoxScoreT
        where SeasonType=4
    ),
    OrderedSeries as (
        select *
        from PlayoffSerieSummaryWithSeasonData
        order by Season, SerieOrder
    ),
    TeamPlayoffs as (
        select T.Season, T.TeamId, TeamName,
               count(*) filter ( where WinnerId=TeamId ) as SeriesWins,
               count(*) filter ( where LoserId=TeamId ) as SeriesLoses,
               avg(iif(TeamId = TeamAId, TeamBSeasonWins, TeamASeasonWins)) as OponentsAverageWins,
               avg(iif(WinnerId = TeamAId, TeamBSeasonWinPercent, TeamASeasonWinPercent)) as OponentsAveragePercent,
               min(iif(WinnerId = TeamAId, TeamBSeasonWins, TeamASeasonWins)) as MinimumOponentSeasonWins,
               min(SerieOrder) as LastSerie,
               sum(iif(TeamId = TeamAId, TeamAWins, TeamBWins)) as Wins,
               sum(iif(TeamId = TeamAId, TeamBWins, TeamAWins)) as Loses,
               iif(TeamId = WinnerId, 'Won ', 'Lost ') || LevelTitle as CampaignTitle,
               group_concat(LevelTitle || ' - ' ||
                            iif(TeamId = WinnerId,
                                'Won (' || iif(TeamId = TeamAId, TeamAWins || '-' || TeamBWins, TeamBWins || '-' || TeamAWins) || ') Against ' || LoserName,
                                'Lost (' || iif(TeamId = TeamAId, TeamAWins || '-' || TeamBWins, TeamBWins || '-' || TeamAWins) || ') Against ' || WinnerName),
                   char(10)) as FullDescription
        from PlayoffTeams T
            inner join OrderedSeries PSSWSD on PSSWSD.Season=T.Season and (TeamAId = T.TeamId or TeamBId=T.TeamId)
        group by T.TeamId, T.SEASON
    )
select *
from TeamPlayoffs;
CREATE VIEW IF NOT EXISTS GameLineups as
with SubEvents as (
    select E1.GameId, E1.EventOrder, E1.PlayerATeamId as TeamId,
           E1.TeamAScore as Score, E1.TeamBScore as OponentScore, Period, RemainingSeconds, TeamALineupIds as Lineup
    from Event E1
    where E1.EventType = 8 and
          E1.EventActionType=0 and
          PlayerATeamId = TeamAId
    union all
    select E1.GameId, E1.EventOrder, E1.PlayerATeamId as TeamId,
           E1.TeamBScore as Score, E1.TeamAScore as OponentScore, Period, RemainingSeconds, TeamBLineupIds as Lineup
    from Event E1
    where E1.EventType = 8 and
          E1.EventActionType=0 and
          PlayerATeamId = TeamBId

    ),
     PeriodStarts as (
         select GameId, EventOrder, TeamAId, TeamBId, TeamALineupIds, TeamBLineupIds,
                E1.TeamAScore, E1.TeamBScore, Period, RemainingSeconds,
                ifnull(lag(TeamALineupIds) over W1, '') as LastTeamALineup,
                ifnull(lag(TeamBLineupIds) over W1, '') as LastTeamBLineup
         from Event E1
         where EventType = 12 and
               EventActionType = 0
         WINDOW W1 as (partition by GameId order by EventOrder)
     ),
     PeriodSubs as (
         select GameId, EventOrder, TeamAId,
                TeamAScore as Score, TeamBScore as OponentScore, Period, RemainingSeconds, TeamALineupIds
         from PeriodStarts
         where TeamALineupIds != LastTeamALineup
         union all
         select GameId, EventOrder, TeamBId,
                TeamBScore as Score, TeamAScore as OponentScore, Period, RemainingSeconds, TeamBLineupIds
         from PeriodStarts
         where TeamBLineupIds != LastTeamBLineup
     ),
     AllSubs as (
         select *,
                iif(Period >= 5, 2880 + (Period - 5) * 300 + (300 - RemainingSeconds),
                    (Period - 1) * 720 + (720 - RemainingSeconds)) as SecondsFromStart
         from SubEvents
         union all
         select *,
                iif(Period >= 5, 2880 + (Period - 5) * 300 + (300 - RemainingSeconds),
                    (Period - 1) * 720 + (720 - RemainingSeconds)) as SecondsFromStart
         from PeriodSubs
         union all
        select GameId, EventOrder, TeamAId,
               TeamAScore as Score, TeamBScore as OponentScore, Period, RemainingSeconds, TeamALineupIds as Lineup,
                iif(Period >= 5, 2880 + (Period - 5) * 300 + (300 - RemainingSeconds),
                    (Period - 1) * 720 + (720 - RemainingSeconds)) as SecondsFromStart
         from Event
         where NextEventNumber is null and Event.Period >= 4 and TeamAScore != Event.TeamBScore
         union all
        select GameId, EventOrder, TeamBId,
               TeamBScore as Score, TeamAScore as OponentScore, Period, RemainingSeconds, TeamBLineupIds as Lineup,
                iif(Period >= 5, 2880 + (Period - 5) * 300 + (300 - RemainingSeconds),
                    (Period - 1) * 720 + (720 - RemainingSeconds)) as SecondsFromStart
         from Event
         where NextEventNumber is null and Event.Period >= 4 and TeamAScore != Event.TeamBScore
     ),
     WithNext as (
        select *,
               lead(EventOrder) over W1 as NextSubOrder,
               lead(Score) over W1 as NextSubScore,
               lead(OponentScore) over W1 as NextSubOponenetScore,
               lead(Period) over W1 as NextSubPeriod,
               lead(RemainingSeconds) over W1 as NextSubRemainingSeconds,
               lead(SecondsFromStart) over W1 as NextSubSecondsFromStart
        from AllSubs
        window W1 as (partition by GameId, TeamId order by EventOrder)
     )
select E1.GameId, E1.TeamId, E1.Lineup,
       EventOrder as StartEventOrder, NextSubOrder as EndEventOrder,
       Score as StartScore, NextSubScore as EndScore,
       OponentScore as StartOponentScore, NextSubOponenetScore as EndOponentScore,
       E1.NextSubScore - E1.Score as ScoredPoints,
       E1.NextSubOponenetScore - E1.OponentScore as ScoredAgainst,
       (E1.NextSubScore - E1.NextSubOponenetScore) - (E1.Score - E1.OponentScore) as PlusMinus,
       E1.Period as StartPeriod,
       E1.RemainingSeconds as StartRemainingSeconds,
       E1.NextSubPeriod as EndPeriod,
       E1.NextSubRemainingSeconds as EndRemainingSeconds,
       SecondsFromStart as StartSecondsFromGameStart,
       NextSubSecondsFromStart as EndSecondsFromGameStart,
       NextSubSecondsFromStart - SecondsFromStart as LineupSeconds
from WithNext E1
where StartPeriod != EndPeriod or StartRemainingSeconds != EndRemainingSeconds;
CREATE VIEW IF NOT EXISTS Games as
    select Season, SeasonType, GameId, GameDate, TeamAId, TeamAName, TeamBId, TeamBName,
       sum(case TeamId when TeamAId then PTS else 0 end) as TeamAScore,
       sum(case TeamId when TeamBId then PTS else 0 end) as TeamBScore,
       max(case WL when 'W' then TeamId else 0 end) as WinnerId,
       max(case WL when 'W' then TeamName else 0 end) as WinnerName,
       max(case WL when 'L' then TeamId else 0 end) as LoserId,
       max(case WL when 'L' then TeamName else 0 end) as LoserName
    from BoxScoreT group by GameId;
CREATE VIEW IF NOT EXISTS PlayerCareerFullStats as
select PlayerId, PlayerName,
        count(*) as GamesPlayed,
        min(Season) as FirstSeason, max(Season) as LastSeason, count(distinct Season) as SeasonsNum,
        sum(MIN) as TotalMIN, round(avg(MIN), 2) as AverageMIN,
        sum(FGM) as TotalFGM, round(avg(FGM), 2) as AverageFGM,
        sum(FGA) as TotalFGA, round(avg(FGA), 2) as AverageFGA,
        sum(FG3M) as TotalFG3M, round(avg(FG3M), 2) as AverageFG3M,
        sum(FG3A) as TotalFG3A, round(avg(FG3A), 2) as AverageFG3A,
        sum(FTM) as TotalFTM, round(avg(FTM), 2) as AverageFTM,
        sum(FTA) as TotalFTA, round(avg(FTA), 2) as AverageFTA,
        sum(OREB) as TotalOREB, round(avg(OREB), 2) as AverageOREB,
        sum(DREB) as TotalDREB, round(avg(DREB), 2) as AverageDREB,
        sum(REB) as TotalREB, round(avg(REB), 2) as AverageREB,
        sum(AST) as TotalAST, round(avg(AST), 2) as AverageAST,
        sum(STL) as TotalSTL, round(avg(STL), 2) as AverageSTL,
        sum(BLK) as TotalBLK, round(avg(BLK), 2) as AverageBLK,
        sum(TOV) as TotalTOV, round(avg(TOV), 2) as AverageTOV,
        sum(PF) as TotalPF, round(avg(PF), 2) as AveragePF,
        sum(PTS) as TotalPTS, round(avg(PTS), 2) as AveragePTS,
        sum(PlusMinus) as TotalPlusMinus, round(avg(PlusMinus), 2) as AveragePlusMinus,
        round(avg(FGM)/avg(FGA), 2) as FGPercent,
        round(avg(FG3M)/avg(FG3A), 2) as FG3Percent,
        round(avg(FTM)/avg(FTA), 2) as FTPercent
    from BoxScoreP BSP
    where SeasonType in (2, 4)
    group by PlayerId;
CREATE VIEW IF NOT EXISTS PlayerCareerPBPSeasonFullStats as
select PlayerId, PlayerName,
        count(*) as GamesPlayed,
        min(Season) as FirstSeason, max(Season) as LastSeason, count(distinct Season) as SeasonsNum,
        sum(MIN) as TotalMIN, round(avg(MIN), 2) as AverageMIN,
        sum(FGM) as TotalFGM, round(avg(FGM), 2) as AverageFGM,
        sum(FGA) as TotalFGA, round(avg(FGA), 2) as AverageFGA,
        sum(FG3M) as TotalFG3M, round(avg(FG3M), 2) as AverageFG3M,
        sum(FG3A) as TotalFG3A, round(avg(FG3A), 2) as AverageFG3A,
        sum(FTM) as TotalFTM, round(avg(FTM), 2) as AverageFTM,
        sum(FTA) as TotalFTA, round(avg(FTA), 2) as AverageFTA,
        sum(OREB) as TotalOREB, round(avg(OREB), 2) as AverageOREB,
        sum(DREB) as TotalDREB, round(avg(DREB), 2) as AverageDREB,
        sum(REB) as TotalREB, round(avg(REB), 2) as AverageREB,
        sum(AST) as TotalAST, round(avg(AST), 2) as AverageAST,
        sum(STL) as TotalSTL, round(avg(STL), 2) as AverageSTL,
        sum(BLK) as TotalBLK, round(avg(BLK), 2) as AverageBLK,
        sum(TOV) as TotalTOV, round(avg(TOV), 2) as AverageTOV,
        sum(PF) as TotalPF, round(avg(PF), 2) as AveragePF,
        sum(PTS) as TotalPTS, round(avg(PTS), 2) as AveragePTS,
        sum(PlusMinus) as TotalPlusMinus, round(avg(PlusMinus), 2) as AveragePlusMinus,
        round(avg(FGM)/avg(FGA), 2) as FGPercent,
        round(avg(FG3M)/avg(FG3A), 2) as FG3Percent,
        round(avg(FTM)/avg(FTA), 2) as FTPercent
    from BoxScoreP BSP
    where SeasonType=2 and Season>=1996
    group by PlayerId;
CREATE VIEW IF NOT EXISTS PlayoffBoxScoreP as
select P.*,
       PBST.SerieOrder, PBST.LevelTitle, PBST.GameNumber,
       LostGames, WonGames, SeriesWins, SeriesLoses
from BoxScoreP P
    inner join PlayoffBoxScoreT PBST on P.GameId = PBST.GameId and P.TeamId = PBST.TeamId;
CREATE VIEW IF NOT EXISTS PlayerPlayoffsFullStats as
select 
    PlayerId, PlayerName, Season,
    TeamId,
    TeamName,
    count(*) as GamesPlayed,
    sum(iif(WL = 'W', 1, 0)) as Wins,
    sum(MIN) as TotalMIN, round(avg(MIN), 2) as AverageMIN,
    sum(FGM) as TotalFGM, round(avg(FGM), 2) as AverageFGM,
    sum(FGA) as TotalFGA, round(avg(FGA), 2) as AverageFGA,
    sum(FG3M) as TotalFG3M, round(avg(FG3M), 2) as AverageFG3M,
    sum(FG3A) as TotalFG3A, round(avg(FG3A), 2) as AverageFG3A,
    sum(FTM) as TotalFTM, round(avg(FTM), 2) as AverageFTM,
    sum(FTA) as TotalFTA, round(avg(FTA), 2) as AverageFTA,
    sum(OREB) as TotalOREB, round(avg(OREB), 2) as AverageOREB,
    sum(DREB) as TotalDREB, round(avg(DREB), 2) as AverageDREB,
    sum(REB) as TotalREB, round(avg(REB), 2) as AverageREB,
    sum(AST) as TotalAST, round(avg(AST), 2) as AverageAST,
    sum(STL) as TotalSTL, round(avg(STL), 2) as AverageSTL,
    sum(BLK) as TotalBLK, round(avg(BLK), 2) as AverageBLK,
    sum(TOV) as TotalTOV, round(avg(TOV), 2) as AverageTOV,
    sum(PF) as TotalPF, round(avg(PF), 2) as AveragePF,
    sum(PTS) as TotalPTS, round(avg(PTS), 2) as AveragePTS,
    sum(PlusMinus) as TotalPlusMinus, round(avg(PlusMinus), 2) as AveragePlusMinus,
    round(avg(FGM)/avg(FGA), 2) as FGPercent,
    round(avg(FG3M)/avg(FG3A), 2) as FG3Percent,
    round(avg(FTM)/avg(FTA), 2) as FTPercent
from BoxScoreP BSP
where SeasonType=4
group by PlayerId, Season;
CREATE VIEW IF NOT EXISTS PlayerSeasonAtTeam as
    select Season, PlayerName, PlayerId, TeamId, TeamName,
           count(*) as GamesNumber,
       sum(iif(WL = 'W', 1, 0)) as Wins,
           sum(iif(WL='L', 1, 0)) as Loses,
        sum(MIN) as TotalMIN, round(avg(MIN), 2) as AverageMIN,
        sum(FGM) as TotalFGM, round(avg(FGM), 2) as AverageFGM,
        sum(FGA) as TotalFGA, round(avg(FGA), 2) as AverageFGA,
        sum(FG3M) as TotalFG3M, round(avg(FG3M), 2) as AverageFG3M,
        sum(FG3A) as TotalFG3A, round(avg(FG3A), 2) as AverageFG3A,
        sum(FTM) as TotalFTM, round(avg(FTM), 2) as AverageFTM,
        sum(FTA) as TotalFTA, round(avg(FTA), 2) as AverageFTA,
        sum(OREB) as TotalOREB, round(avg(OREB), 2) as AverageOREB,
        sum(DREB) as TotalDREB, round(avg(DREB), 2) as AverageDREB,
        sum(REB) as TotalREB, round(avg(REB), 2) as AverageREB,
        sum(AST) as TotalAST, round(avg(AST), 2) as AverageAST,
        sum(STL) as TotalSTL, round(avg(STL), 2) as AverageSTL,
        sum(BLK) as TotalBLK, round(avg(BLK), 2) as AverageBLK,
        sum(TOV) as TotalTOV, round(avg(TOV), 2) as AverageTOV,
        sum(PF) as TotalPF, round(avg(PF), 2) as AveragePF,
        sum(PTS) as TotalPTS, round(avg(PTS), 2) as AveragePTS,
        sum(PlusMinus) as TotalPlusMinus, round(avg(PlusMinus), 2) as AveragePlusMinus,
        round(avg(FGM)/avg(FGA), 2) as FGPercent,
        round(avg(FG3M)/avg(FG3A), 2) as FG3Percent,
        round(avg(FTM)/avg(FTA), 2) as FTPercent
    from BoxScoreP 
    where SeasonType=2
    group by Season, PlayerId, TeamId;
CREATE VIEW IF NOT EXISTS PlayerSeasonFullStats as
select
    PlayerId, PlayerName, Season, group_concat(distinct TeamName) as PlayerTeams,
    max(GameDate) as LastGameDate, TeamId as LastTeamId, TeamName as LastTeamName,
    count(*) as GamesPlayed, sum(iif(WL = 'W', 1, 0)) as Wins,
    sum(MIN) as TotalMIN, round(avg(MIN), 2) as AverageMIN,
    sum(FGM) as TotalFGM, round(avg(FGM), 2) as AverageFGM,
    sum(FGA) as TotalFGA, round(avg(FGA), 2) as AverageFGA,
    sum(FG3M) as TotalFG3M, round(avg(FG3M), 2) as AverageFG3M,
    sum(FG3A) as TotalFG3A, round(avg(FG3A), 2) as AverageFG3A,
    sum(FTM) as TotalFTM, round(avg(FTM), 2) as AverageFTM,
    sum(FTA) as TotalFTA, round(avg(FTA), 2) as AverageFTA,
    sum(OREB) as TotalOREB, round(avg(OREB), 2) as AverageOREB,
    sum(DREB) as TotalDREB, round(avg(DREB), 2) as AverageDREB,
    sum(REB) as TotalREB, round(avg(REB), 2) as AverageREB,
    sum(AST) as TotalAST, round(avg(AST), 2) as AverageAST,
    sum(STL) as TotalSTL, round(avg(STL), 2) as AverageSTL,
    sum(BLK) as TotalBLK, round(avg(BLK), 2) as AverageBLK,
    sum(TOV) as TotalTOV, round(avg(TOV), 2) as AverageTOV,
    sum(PF) as TotalPF, round(avg(PF), 2) as AveragePF,
    sum(PTS) as TotalPTS, round(avg(PTS), 2) as AveragePTS,
    sum(PlusMinus) as TotalPlusMinus, round(avg(PlusMinus), 2) as AveragePlusMinus,
    round(avg(FGM)/avg(FGA), 2) as FGPercent,
    round(avg(FG3M)/avg(FG3A), 2) as FG3Percent,
    round(avg(FTM)/avg(FTA), 2) as FTPercent
from BoxScoreP BSP
where SeasonType = 2
group by PlayerId, Season;
CREATE VIEW IF NOT EXISTS PlayersEliminationGames as
select
    PlayerId, PlayerName,
    count(*) as GamesPlayed,
    sum(MIN) as TotalMIN, round(avg(MIN), 2) as AverageMIN,
    sum(FGM) as TotalFGM, round(avg(FGM), 2) as AverageFGM,
    sum(FGA) as TotalFGA, round(avg(FGA), 2) as AverageFGA,
    sum(FG3M) as TotalFG3M, round(avg(FG3M), 2) as AverageFG3M,
    sum(FG3A) as TotalFG3A, round(avg(FG3A), 2) as AverageFG3A,
    sum(FTM) as TotalFTM, round(avg(FTM), 2) as AverageFTM,
    sum(FTA) as TotalFTA, round(avg(FTA), 2) as AverageFTA,
    sum(OREB) as TotalOREB, round(avg(OREB), 2) as AverageOREB,
    sum(DREB) as TotalDREB, round(avg(DREB), 2) as AverageDREB,
    sum(REB) as TotalREB, round(avg(REB), 2) as AverageREB,
    sum(AST) as TotalAST, round(avg(AST), 2) as AverageAST,
    sum(STL) as TotalSTL, round(avg(STL), 2) as AverageSTL,
    sum(BLK) as TotalBLK, round(avg(BLK), 2) as AverageBLK,
    sum(TOV) as TotalTOV, round(avg(TOV), 2) as AverageTOV,
    sum(PF) as TotalPF, round(avg(PF), 2) as AveragePF,
    sum(PTS) as TotalPTS, round(avg(PTS), 2) as AveragePTS,
    sum(PlusMinus) as TotalPlusMinus, round(avg(PlusMinus), 2) as AveragePlusMinus,
    round(avg(FGM)/avg(FGA), 2) as FGPercent,
    round(avg(FG3M)/avg(FG3A), 2) as FG3Percent,
    round(avg(FTM)/avg(FTA), 2) as FTPercent
from PlayoffBoxScoreP
where LostGames = max(SeriesWins, SeriesLoses) - 1
group by PlayerId;
CREATE VIEW IF NOT EXISTS PlayerSerieFullStats as
select
    PlayerId, PlayerName, TeamId, TeamName, TeamAbbreviation,
    Season, TeamAId, TeamAName, TeamBId, TeamBName, SerieOrder, LevelTitle,
    count(*) as GamesPlayed,
    sum(MIN) as TotalMIN, round(avg(MIN), 2) as AverageMIN,
    sum(FGM) as TotalFGM, round(avg(FGM), 2) as AverageFGM,
    sum(FGA) as TotalFGA, round(avg(FGA), 2) as AverageFGA,
    sum(FG3M) as TotalFG3M, round(avg(FG3M), 2) as AverageFG3M,
    sum(FG3A) as TotalFG3A, round(avg(FG3A), 2) as AverageFG3A,
    sum(FTM) as TotalFTM, round(avg(FTM), 2) as AverageFTM,
    sum(FTA) as TotalFTA, round(avg(FTA), 2) as AverageFTA,
    sum(OREB) as TotalOREB, round(avg(OREB), 2) as AverageOREB,
    sum(DREB) as TotalDREB, round(avg(DREB), 2) as AverageDREB,
    sum(REB) as TotalREB, round(avg(REB), 2) as AverageREB,
    sum(AST) as TotalAST, round(avg(AST), 2) as AverageAST,
    sum(STL) as TotalSTL, round(avg(STL), 2) as AverageSTL,
    sum(BLK) as TotalBLK, round(avg(BLK), 2) as AverageBLK,
    sum(TOV) as TotalTOV, round(avg(TOV), 2) as AverageTOV,
    sum(PF) as TotalPF, round(avg(PF), 2) as AveragePF,
    sum(PTS) as TotalPTS, round(avg(PTS), 2) as AveragePTS,
    sum(PlusMinus) as TotalPlusMinus, round(avg(PlusMinus), 2) as AveragePlusMinus,
    round(avg(FGM)/avg(FGA), 2) as FGPercent,
    round(avg(FG3M)/avg(FG3A), 2) as FG3Percent,
    round(avg(FTM)/avg(FTA), 2) as FTPercent
from PlayoffBoxScoreP BSP
group by PlayerId, Season, TeamAId, TeamBId;
CREATE VIEW IF NOT EXISTS PlayoffSeriesWithOdds as
with
    SerieOddsRound as (
        select P.*,
               min(O.Round) filter ( where O.Team=P.LoserName ) as LoserLastRound,
               min(O.Round) filter ( where O.Team=P.WinnerName ) as WinnerLastRound,
               max(O.Odd) filter ( where O.Round=4 ) + 100 as DefaultOdd
        from PlayoffSerieSummary P
            left join Odds O on P.Season = O.Season and O.Round >= P.SerieOrder
        group by P.SEASON, TeamAId, TeamBId
    )
select S.*,
       coalesce(OW.Odd, DefaultOdd) as WinnerOdds,
       coalesce(OL.Odd, DefaultOdd) as LoserOdds
from SerieOddsRound S
    left join Odds OW on OW.Season = S.Season and OW.Team=S.WinnerName and OW.Round=coalesce(LoserLastRound, WinnerLastRound)
    left join Odds OL on OL.Season = S.Season and OL.Team=S.LoserName and OL.Round=coalesce(LoserLastRound, WinnerLastRound)
group by S.SEASON, TeamAId, TeamBId;
CREATE VIEW IF NOT EXISTS TeamSeriesWithOdds as
select PO.*, WinnerId as TeamId, WinnerName as TeamName, 1 as Won,
       iif(PO.WinnerOdds < PO.LoserOdds, 1, 0) as ShouldWon,
       iif(PO.WinnerOdds > PO.LoserOdds, 1, 0) as ShouldLost 
from PlayoffSeriesWithOdds PO
union
select PO.*, LoserId as TeamId, LoserName as TeamName, 0 as Won,
       iif(PO.LoserOdds < PO.WinnerOdds, 1, 0) as ShouldWon,
       iif(PO.LoserOdds > PO.WinnerOdds, 1, 0) as ShouldLost 
from PlayoffSeriesWithOdds PO;
CREATE VIEW IF NOT EXISTS PlayerSeriesWithOdds as
select P.*,
       ShouldLost, ShouldWon, WinnerOdds, LoserOdds, WinnerId, LoserId, Won
from PlayerSerieFullStats P
    inner join TeamSeriesWithOdds TSWO on P.Season = TSWO.Season and P.TeamId = TSWO.TeamId and P.TeamAId = TSWO.TeamAId and P.TeamBId = TSWO.TeamBId;
CREATE VIEW IF NOT EXISTS PlayerTeams as
with
    Islands as (
        select PlayerId, PlayerName, Season, GameDate, TeamId, TeamName,
                row_number() over w1 - row_number() over w2 as diff
        from BoxScoreP
        where SeasonType in (2, 4, 5)
        WINDOW w1 AS (partition by PlayerId order by GameDate),
            w2 as (PARTITION BY PlayerId, TeamId ORDER BY GameDate)
    )
select PlayerId, PlayerName, min(GameDate) as StartDate, max(GameDate) as EndDate,
       min(Season) as FirstSeason, max(Season) as LastSeason,
       group_concat(distinct TeamName) as TeamNames, TeamId
from Islands
group by diff, PlayerId;
CREATE VIEW IF NOT EXISTS PlayoffShotsGroupedByStageAndTimeLeft as
with 
    GroupedShots as (
        select PlayerAId, PlayerName, Stages.Stage, SecondsLeft.Seconds,
               sum(iif(ShotValue = 1, MadeShot, 0)) * 1.0 as FTM, sum(iif(ShotValue = 1, 1, 0)) * 1.0 as FTA,
               sum(iif(ShotValue >= 2, MadeShot, 0)) * 1.0 as FGM, sum(iif(ShotValue >= 2, 1, 0)) * 1.0 as FGA,
               sum(iif(ShotValue = 3, MadeShot, 0)) * 1.0 as FG3M, sum(iif(ShotValue = 3, 1, 0)) * 1.0 as FG3A,
               sum(iif(MadeShot, ShotValue, 0)) * 1.0 as PTS
        from PlayoffShots,
             (select 4 as Stage union all select 3 union all select 2 union all select 1) Stages,
             (select 300 as Seconds union all
             select 240 union all
             select 180 union all
             select 120 union all
             select 60 union all
             select 50 union all
             select 40 union all
             select 30 union all
             select 20 union all
             select 10) SecondsLeft
        where RemainingSeconds <= SecondsLeft.Seconds and Period >= 4 and abs(ScoreMargin) <= 5 and SerieOrder <= Stages.Stage
        group by PlayerAId, Stages.Stage, SecondsLeft.Seconds
    )
select PlayerAId, PlayerName, Stage, Seconds,
       FTM, FTA, iif(FTA > 0, round(FTM / FTA, 2), null) as FTPercent,
       FGM, FGA, iif(FGA > 0, round(FGM / FGA, 2), null) as FGPercent,
       FG3M, FG3A, iif(FG3A > 0, round(FG3M / FG3A, 2), null) as FG3Percent,
       iif(FGA > 0, round((FGM + 0.5 * FG3M) / FGA, 2), 0) as EFG,
       round(PTS / (2 * (FGA + 0.44 * FTA)), 2) as TS
from GroupedShots;
CREATE VIEW IF NOT EXISTS RegularSeasonShots as
select
    PlayerAId, PlayerName, TeamId as PlayerTeamId, TeamName as PlayerTeamName,
       S.TeamAId, S.TeamAName, S.TeamBId, S.TeamBName, S.GameId, BSP.GameDate,
       BSP.SeasonType, BSP.Season,
       Period, RemainingSeconds, ShotValue, MadeShot, ScoreMargin, S.TeamAScore, S.TeamBScore, Description, EventOrder
from Shots S
    inner join BoxScoreP BSP on S.GameId = BSP.GameId and PlayerAId = BSP.PlayerId
where BSP.SeasonType = 2;
CREATE VIEW IF NOT EXISTS SeasonPossessions as
with 
    GamesAndPossessions as (
        select GameId, TeamAId as TeamId,
           max(RealPossesionNumber) - 1 as Possessions
        from Event
        group by GameId
    )
select Season,
       (sum(Possessions) * 24.0) / sum(MIN / 5.0) as Ratio
from GamesAndPossessions GAP
    inner join BoxScoreT BST on BST.GameId = GAP.GameId and BST.TeamId = GAP.TeamId
where SeasonType=2
group by Season;
CREATE VIEW IF NOT EXISTS SeasonStatsCriteria as
select
       Season,
       max(GamesPlayed) as MaxGames,
       ceil(0.7 * max(GamesPlayed)) as StatsCriteria
from TeamSeason
group by Season;
CREATE VIEW IF NOT EXISTS TeamsCurrentName as
with
    TeamLastGame as(
        select
            TeamId, TeamName, Season, SeasonType,
            max(GameDate) as LastGame
        from BoxScoreT
        group by TeamId
    )
select *
from TeamLastGame;
CREATE VIEW IF NOT EXISTS SeasonSummary as
with
    SeasonAwards as (
    select Season,
           max(iif(Description='NBA Most Valuable Player', P.PlayerId, null)) as MVPId,
           max(iif(Description='NBA Most Valuable Player', P.FullName, null)) as MVPName,
           max(iif(Description='NBA Finals Most Valuable Player', P.PlayerId, null)) as FMVPId,
           max(iif(Description='NBA Finals Most Valuable Player', P.FullName, null)) as FMVPName,
           max(iif(Description='NBA Rookie of the Year', P.PlayerId, null)) as ROTYId,
           max(iif(Description='NBA Rookie of the Year', P.FullName, null)) as ROTYName,
           max(iif(Description='NBA Defensive Player of the Year', P.PlayerId, null)) as DPOYId,
           max(iif(Description='NBA Defensive Player of the Year', P.FullName, null)) as DPOYName,
           max(iif(Description='NBA Most Improved Player', P.PlayerId, null)) as MIPId,
           max(iif(Description='NBA Most Improved Player', P.FullName, null)) as MIPName,
           max(iif(Description='NBA Sixth Man of the Year', P.PlayerId, null)) as SMOTYId,
           max(iif(Description='NBA Sixth Man of the Year', P.FullName, null)) as SMOTYName
    from Awards
        inner join Player P on Awards.PlayerId = P.PlayerId
    where Season != 0
    group by Season
)
select SA.*,
       PSS.WinnerId,
       PSS.WinnerName,
       TCNW.TeamName as WinnerCurrentName,
       PSS.LoserId,
       PSS.LoserName,
       TCNL.TeamName as LoserCurrentName
from SeasonAwards SA
    left join PlayoffSerieSummary PSS on PSS.Season = SA.Season and PSS.SerieOrder=1
    left join TeamsCurrentName TCNW on TCNW.TeamId = PSS.WinnerId
    left join TeamsCurrentName TCNL on TCNL.TeamId = PSS.LoserId;
CREATE VIEW IF NOT EXISTS Teams as
select TeamId, TeamName, TeamAbbreviation, 
       min(Season) as FirstUsed, max(Season) as LastUsed 
from BoxScoreT 
group by TeamId, TeamName, TeamAbbreviation;
CREATE VIEW IF NOT EXISTS TeamsCount as
select Season, count(distinct TeamId) as TeamsNumber 
from BoxScoreT
where SeasonType=2
group by Season;
CREATE VIEW IF NOT EXISTS TeamSequence as
with
     TeamsSeasons as (
         select Season, TeamId, TeamAbbreviation, TeamName 
         from BoxScoreT
         group by Season, TeamId, TeamName, TeamAbbreviation
     ),
     WithPreviousSeason as (
         select Season, TeamId, TeamName, TeamAbbreviation,
                row_number() over (partition by TeamId, TeamName, TeamAbbreviation order by Season) as SeasonNumber
         from TeamsSeasons
    )
select TeamId, TeamAbbreviation, TeamName, min(Season) as FirstSeason, max(Season) as LastSeason
from WithPreviousSeason
group by TeamId, TeamAbbreviation, TeamName, Season - SeasonNumber
order by FirstSeason;
CREATE VIEW IF NOT EXISTS TeamsPlayoffOddsSummary as
select TeamId, group_concat(distinct TeamName) as Names, count(distinct Season || TS.SerieOrder) as SeriesCount,
       sum(ShouldWon*Won) as FavouriteWins,
       sum(ShouldWon*(1 - Won)) as FavouriteLoses,
       sum(ShouldLost*Won) as UnderdogWins,
       sum(ShouldLost*(1 - Won)) as UnderdogLoses
from TeamSeriesWithOdds TS
group by TS.TeamId;
CREATE VIEW IF NOT EXISTS Seasons as
select distinct Season, SeasonType
from BoxScoreT;
CREATE VIEW IF NOT EXISTS PlayerWithCorrectedAge as
select Player.*,
       coalesce(AC.RealBirthDate, BP.Birthdate, PM.PlayerBREFBirthDate, PM.PlayerNBABirthDate, Player.BirthDate) as RealBirthDate
from Player
    left join AgeCorrection AC on Player.PlayerId = AC.PlayerId
    left join PlayerMapping PM on PM.PlayerNBAId=Player.PlayerId
    left join BREFPlayer BP on PM.PlayerBREFId = BP.PlayerId;
CREATE VIEW IF NOT EXISTS BoxScorePWithAge as
select BoxScoreP.*,
       julianday(GameDate) - julianday(RealBirthDate) as DaysDiff,
       cast(strftime('%Y.%j', GameDate) - strftime('%Y.%j', RealBirthDate) as int) as AgeYears,
       -- AgeDays = days between current date and last birthday = days between Cy/Cm/Cd and (By + (C-B)y)/Bm/Bd
       cast((julianday(GameDate) -
       julianday(datetime(RealBirthDate, '+' || cast(strftime('%Y.%j', GameDate) - strftime('%Y.%j', RealBirthDate) as int) || ' years'))) as integer)
           as AgeDays
from BoxScoreP
    inner join PlayerWithCorrectedAge PWCA on BoxScoreP.PlayerId = PWCA.PlayerId;
CREATE VIEW IF NOT EXISTS PlayoffBoxScorePWithAge as
select BoxScoreP.*,
       PBST.SerieOrder, PBST.LevelTitle, PBST.GameNumber,
       julianday(BoxScoreP.GameDate) - julianday(RealBirthDate) as DaysDiff,
       cast(strftime('%Y.%j', BoxScoreP.GameDate) - strftime('%Y.%j', RealBirthDate) as int) as AgeYears,
       -- AgeDays = days between current date and last birthday = days between Cy/Cm/Cd and (By + (C-B)y)/Bm/Bd
       cast((julianday(BoxScoreP.GameDate) -
       julianday(datetime(RealBirthDate, '+' || cast(strftime('%Y.%j', BoxScoreP.GameDate) - strftime('%Y.%j', RealBirthDate) as int) || ' years'))) as integer)
           as AgeDays
from BoxScoreP
    inner join PlayerWithCorrectedAge PWCA on BoxScoreP.PlayerId = PWCA.PlayerId
    inner join PlayoffBoxScoreT PBST on BoxScoreP.GameId = PBST.GameId and BoxScoreP.TeamId = PBST.TeamId;
CREATE VIEW IF NOT EXISTS PlayoffShots as
select
    PlayerAId, PlayerName, TeamId as PlayerTeamId, TeamName as PlayerTeamName, BSP.Season,
       PSWS.TeamAId, PSWS.TeamAName, PSWS.TeamBId, PSWS.TeamBName, BSP.GameDate, BSP.GameId, WL,
       SerieOrder, LevelTitle, Period, RemainingSeconds, ShotValue, MadeShot, ScoreMargin, S.TeamAScore, S.TeamBScore, Description, EventOrder
from Shots S
    inner join BoxScoreP BSP on S.GameId = BSP.GameId and PlayerAId = BSP.PlayerId
    inner join PlayoffSerieSummary PSWS on BSP.Season = PSWS.Season and PSWS.TeamAId = S.TeamAId and PSWS.TeamBId = S.TeamBId
where BSP.SeasonType = 4;